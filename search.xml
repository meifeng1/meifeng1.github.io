<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ajax</title>
      <link href="/2019/09/14/Ajax/"/>
      <url>/2019/09/14/Ajax/</url>
      
        <content type="html"><![CDATA[<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p><strong>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</strong></p><h4 id="什么是-AJAX-？"><a href="#什么是-AJAX-？" class="headerlink" title="什么是 AJAX ？"></a>什么是 AJAX ？</h4><p>AJAX = 异步 JavaScript 和 XML。</p><p>AJAX 是一种用于创建快速动态网页的技术。</p><p>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p><p>传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。</p><p>有很多使用 AJAX 的应用程序案例：新浪微博、Google 地图、开心网等等</p><h4 id="Ajax的基本代码"><a href="#Ajax的基本代码" class="headerlink" title="Ajax的基本代码"></a>Ajax的基本代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">创建XNLHttpRequest()对象</span><br><span class="line">      <span class="keyword">let</span> xml = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">      发送请求</span><br><span class="line">      xml.open();</span><br><span class="line">      xml.send();</span><br><span class="line">      监听事件</span><br><span class="line">      xml.onreadystatechage = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br></pre></td></tr></table></figure><h4 id="向服务器发送请求"><a href="#向服务器发送请求" class="headerlink" title="向服务器发送请求"></a>向服务器发送请求</h4><blockquote><p>xml.open()</p><p>xml.send()</p></blockquote><p><strong>open(method,url,async)</strong>     规定请求类型,url以及是否是异步处理请求</p><p>method:请求的类型,  GET或POST</p><p>url:文件在服务器上的位置</p><p>async:true(异步)或者false(同步)</p><p><strong>send(string)</strong>    将请求发送到服务器    string仅用于POST请求</p><h4 id="Ajax–onreadystatechange事件"><a href="#Ajax–onreadystatechange事件" class="headerlink" title="Ajax–onreadystatechange事件"></a>Ajax–onreadystatechange事件</h4><p>当请求被发送到服务器时,需要执行的一些基于响应的任务</p><p>每当readyState改变时,就会触发onreadystatechange事件</p><p>readyState属性存在XMLHttpRequest的状态信息</p><table><thead><tr><th>属性</th><th align="center">描述</th></tr></thead><tbody><tr><td>onreadystatechange</td><td align="center">存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。</td></tr><tr><td>readyState</td><td align="center">存有XMLHttpRequest的状态,从0到4发生变化<br>0:请求未初始化<br>1:服务器连接已建立<br>2:请求已接收<br>3:请求处理中<br>4:请求已完成,且响应已就绪</td></tr><tr><td>status</td><td align="center">200:”OK”<br>404:未找到页面</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>这是一个模拟上传文件</title>
      <link href="/2019/09/14/%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E6%A8%A1%E6%8B%9F/"/>
      <url>/2019/09/14/%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E6%A8%A1%E6%8B%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="这是一个模拟上传文件"><a href="#这是一个模拟上传文件" class="headerlink" title="这是一个模拟上传文件"></a>这是一个模拟上传文件</h2><h4 id="模拟上传"><a href="#模拟上传" class="headerlink" title="模拟上传"></a>模拟上传</h4><p>方法很简单</p><p>成都分行</p><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javascript</title>
      <link href="/2019/09/14/javascript/"/>
      <url>/2019/09/14/javascript/</url>
      
        <content type="html"><![CDATA[<h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><h3 id="事件函数"><a href="#事件函数" class="headerlink" title="事件函数"></a>事件函数</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原生js </tag>
            
            <tag> 事件函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript</title>
      <link href="/2019/09/14/ES6%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8/"/>
      <url>/2019/09/14/ES6%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6经典入门"><a href="#ES6经典入门" class="headerlink" title="ES6经典入门"></a>ES6经典入门</h1><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><p>之前版本:   用var定义</p><p>现在版本:  const 用来定义常量定义完必须有值不可修改     let相当于var     <strong>在以后开发中尽量使用let不适用var</strong> </p><blockquote><p>let需要注意: </p><p> 1.没有预解析,不存在变量提升     在代码块内,只要let定义变量,在之前使用,都会报错            先定义后使用</p><p>2.在同一个作用域里面,不可以重复定义变量</p><p>3.在for循环,for循环里面是父级作用域,循环内又是一个 </p></blockquote><p>块级作用域:{  块级作用域  }</p><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值:"></a>解构赋值:</h3><p>适合用于做数据交互Ajax</p><p>例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c]=[<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><blockquote><p>注意:左右两边,结构格式要保持一致</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">json:</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name,age,job&#125;=&#123;</span><br><span class="line">    name:<span class="string">'Strive'</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    job:<span class="string">'码畜'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>解构时候可以给默认值</p><p>​      let[a,b,c=”默认值”] = [‘aaa’,’bbb’]</p><h3 id="字符串模板及字符串新增"><a href="#字符串模板及字符串新增" class="headerlink" title="字符串模板及字符串新增"></a>字符串模板及字符串新增</h3><p>字符串模板优点:可以随意换行</p><p><code>${变量名字}</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name=<span class="string">'Strive'</span>;</span><br><span class="line"><span class="keyword">let</span> age=<span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">`这个人叫<span class="subst">$&#123;name&#125;</span>,年龄 <span class="subst">$&#123;age&#125;</span>岁`</span>;</span><br></pre></td></tr></table></figure><h6 id="反撇号（-）基础知识"><a href="#反撇号（-）基础知识" class="headerlink" title="反撇号（`）基础知识"></a>反撇号（`）基础知识</h6><p>ES6引入了一种新型的字符串字面量语法，我们称之为模板字符串（template strings）。除了使用反撇号字符 ` 代替普通字符串的引号 ‘ 或 “ 外，它们看起来与普通字符串并无二致。在最简单的情况下，它们与普通字符串的表现一致</p><p>关于字符串的一些东西</p><p>​        <strong>字符串查找:</strong></p><p>​        <strong>str.indexOf(要查找的东西) 返回索引(位置),没找到返回-1</strong></p><p>​        <strong>str.indludes(要找的东西) 返回值   true/false</strong></p><p>​                <strong>判断浏览器:includes</strong></p><p> <strong>字符串是否以谁开头:</strong></p><p>​        <strong>str.startsWith(检测的东西)</strong></p><p><strong>字符串是否以谁结尾:</strong></p><p>​        <strong>str.endsWith(检测的东西)</strong></p><p><strong>重复字符串:</strong></p><p>​        <strong>str.repeat(重复次数)</strong></p><p><strong>填充字符串:</strong></p><p>​        <strong>str.padStart(整个字符串长度,填充东西)往后填充</strong></p><p>​        <strong>str.padStart(整个字符串长度,填充东西) 往后填充</strong></p><h3 id="函数变化"><a href="#函数变化" class="headerlink" title="函数变化"></a>函数变化</h3><ul><li><p>函数默认参数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">&#123;x=<span class="number">0</span>,y=<span class="number">0</span>&#125;=&#123;&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x,y)</span><br><span class="line">&#125;</span><br><span class="line">show()</span><br></pre></td></tr></table></figure></li><li><p>函数参数默认已经定义了,不能在使用let,cost声明</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">a=<span class="number">18</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> a=<span class="number">101</span><span class="comment">//错误</span></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">show()</span><br></pre></td></tr></table></figure><p>扩展运算符,Rest运算符:               …数组</p><h6 id="箭头函数-gt-左边参数-右边传值"><a href="#箭头函数-gt-左边参数-右边传值" class="headerlink" title="箭头函数:  ()=&gt;{}  左边参数,右边传值"></a>箭头函数:  ()=&gt;{}  左边参数,右边传值</h6><p>()=&gt;{</p><p>​    语句;</p><p>} </p><blockquote><p>注意点:</p><pre><code>1. this问题,定义函数所在的对象,不在是运行时所在的对象2. 箭头函数里面没有arguments,要用&quot;...&quot;3. 箭头函数不能当构造函数</code></pre></blockquote><h2 id="数组循环"><a href="#数组循环" class="headerlink" title="数组循环"></a>数组循环</h2><p>ES里面新增东西:</p><p>​    循环:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">for</span><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.length;i++)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="keyword">while</span> </span><br><span class="line"></span><br><span class="line">    arr.forEach()  <span class="comment">//用于代替普通的for循环</span></span><br><span class="line"><span class="string">`arr.forEach(function(val,index,arr)&#123;console.log(val,index,arr)&#125;)`</span></span><br><span class="line"><span class="comment">//以下方法都是接收两个参数</span></span><br><span class="line">    arr.map()     <span class="comment">//做数据交互 "映射" 正常情况下,需要配合return  ,返回一个新的数组,,如果没有return  相当于forEach          只要用到map就一定要与return一起使用</span></span><br><span class="line">arr.filter)   <span class="comment">//  过滤一些不合格的元素 有返回值,返回true时返回</span></span><br><span class="line">    arr.some()   <span class="comment">//  </span></span><br><span class="line">arr.every()  <span class="comment">//</span></span><br><span class="line">arr.reduce()  <span class="comment">//</span></span><br><span class="line">arr.reduceRight()   <span class="comment">//</span></span><br></pre></td></tr></table></figure><p>ES2017新增的运算符   幂运算  math.pow(2,3)  2**3</p><p>for…of…循环</p><p>​    <code>for(let val of arr){console.log(val)}</code></p><h3 id="数组新增东西"><a href="#数组新增东西" class="headerlink" title="数组新增东西"></a>数组新增东西</h3><p>将li标签转为数组          let allLi=[…ali]</p><p>Array.from作用:把类数组(获取一组元素,arguments…)对象转成数组 </p><p>let arr2=Array.from(arr,length)</p><p>Array.of()   把一组值转为数组</p><p>arr.find()  查找   第一个符合条件的数组成员 , 如果没有找到,返回undefined</p><p>arr.findIndex   找的是位置   没找到返回   -1</p><p>arr.fill()   填充    arr.fill(填充的东西,开始位置,结束位置)</p><p>arr.indexOf()           arr.includes()          str.includes()</p><h3 id="对象简单语法"><a href="#对象简单语法" class="headerlink" title="对象简单语法"></a>对象简单语法</h3><p>json  对象简单语法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> json=&#123;</span><br><span class="line">    a:<span class="number">1</span>;</span><br><span class="line">    b:<span class="number">2</span>;showA:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> json=&#123;</span><br><span class="line">    a;</span><br><span class="line">    b;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Object.is(啊,b)   用来比较这两个东西是否相等</p><p>另外两个比较是否相等:”==”    “===”</p><p>Object.assign()用来合并对象</p><h3 id="Promise-承诺-许诺"><a href="#Promise-承诺-许诺" class="headerlink" title="Promise    承诺,许诺"></a>Promise    承诺,许诺</h3><p>解决异步回调函数,事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ajax(url,&#123;<span class="comment">//获取token</span></span><br><span class="line">    ajax(url,()=&gt;&#123;</span><br><span class="line">          ajax(url,()=&gt;&#123;</span><br><span class="line">            <span class="comment">//获取用户相关信息</span></span><br><span class="line">        &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>语法: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//resolve   成功调用</span></span><br><span class="line">    <span class="comment">//reject    失败调用</span></span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;,err=&gt;&#123;&#125;)</span><br><span class="line">promise.catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(s=<span class="number">10</span>)   resolve(<span class="string">'成功'</span>)</span><br><span class="line">   <span class="keyword">else</span>       reject(<span class="string">'失败'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Promise.all([p1,p2,p3]):把promise打包,仍到一个数组里面,打包完还是一个promise对象,必须确保,所有的promise对象,都是resolve状态,都是成功</p><p><strong>promise.race([p1,p2,p3])  只要有一个成功就返回</strong></p><p>用户登陆-&gt;用户信息</p><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>​    js<strong>不支持模块化</strong></p><p>​        ruby  require</p><p>​        python import</p><p>在ES6之前,社会制定了一套模块规范</p><ul><li><p>import{xx} ddd</p></li><li><p>Math.pow()</p></li><li><p>Math.abs()</p><p><strong>模块化:</strong></p><ul><li>如何定义模块化</li><li>如何使用?</li></ul><p><strong>使用模块</strong></p><ul><li><script type="module"><script></li></ul><p><strong>import特点:</strong></p><ul><li><p>import可以是相对路径,也可以是绝对路径   import:’绝对引入路径’</p></li><li><p>无论引入多少次,import只会导入一次</p></li><li><p>import’./modules/1.js’;如果这么用,就相当于引入文件</p></li><li><p>有提升效果,import会自动提升到顶部,首先执行</p></li><li><p>导出去模块内容,如果里面有定时器更改,外面也会改变,不想Common规范缓存</p></li></ul></li></ul><pre><code>**import()  类似node里面的require,可以动态引入,默认import语法不能写道if之类里面**​        **import(&apos;./modules/1.js&apos;).then(res=&gt;{console.log(a)})**优点:- 按需加载- 可以写if中- 路径也可以动态ES6中默认就是严格模式:    &apos;use strict&apos;</code></pre></script></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原生js </tag>
            
            <tag> 事件函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2019/09/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/09/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="什么是正则："><a href="#什么是正则：" class="headerlink" title="什么是正则："></a>什么是正则：</h2><p>事先写好一个规则，</p><p>然后用这个规则对字符串进行过滤</p><h2 id="正则表达式的写法："><a href="#正则表达式的写法：" class="headerlink" title="正则表达式的写法："></a>正则表达式的写法：</h2><p>  1.构造函数   <code>new RegExp(&quot;规则&quot;)</code></p><p>   2.字面量写法</p><hr><p><code>leg reg=new   RegExp(&#39;规则&#39;)</code></p><p><code>let reg=/规则/</code></p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">'百色学院信息工程学院计算机科学与技术专业'</span></span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/计算机科学与技术/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str))<span class="comment">//控制台输出   true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1=<span class="string">'百色学院信息工程学院计算机科学与技术专业'</span>;</span><br><span class="line"><span class="keyword">let</span> reg1=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'技术'</span>);</span><br><span class="line"><span class="keyword">let</span> suc=reg1.test(str1)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'suc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通常与if进行搭配</span></span><br></pre></td></tr></table></figure><hr><hr><p>正则的作用：用于做数据验证，判断所输入数据是否符合规则</p><hr><p>let str=’黄某人’</p><p>查找以某个具体字开头   let reg=/^黄/     //  ^符号是以某个元素开头</p><p>查找以某个元素结尾  let reg=/$ 人 /                                              </p><p>   // ’$ ‘符号以人结尾的元素</p><h2 id="match方法"><a href="#match方法" class="headerlink" title="match方法"></a>match方法</h2><p>作用：也是对字符串进行匹配   返回结果是匹配到的内容</p><p>match()与test()的区别：</p><blockquote><p>百色学院</p><p>/百色/</p><p>test：true</p><p>match：百色</p></blockquote><p>返回所有想要查找的东西   g 全局匹配    后面加  “i ”  是不区分大小写   在后面加m标签忽略换行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">'abacdaokkjakldjadayudga'</span>;</span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/a/g</span>;</span><br><span class="line"><span class="keyword">let</span> reg1=<span class="regexp">/a/gi</span>;</span><br><span class="line"><span class="keyword">let</span> reg2=<span class="regexp">/a/gm</span>;</span><br><span class="line"><span class="keyword">let</span> reg2=<span class="regexp">/a/img</span>;  <span class="comment">//img 没有顺序之分，</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg))  </span><br><span class="line"><span class="comment">//打印出str字符串中所有的“a”元素</span></span><br></pre></td></tr></table></figure><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><blockquote><p>//反斜杠 \  起到转义作用  把没有意义的转变为有意义的，把有意义的转变为没有意义的</p><p>\d :      //   匹配一股数字</p><p>\D:     //    匹配一个非数字，只要不是数字就能被匹配到</p><p>\w：    //匹配字母、数字、下划线</p><p>\W     //匹配上面作用刚好反向</p><p>\s     //匹配一个空格</p><p>\S    //匹配一个非空格</p></blockquote><p><strong>元字符表:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">^   <span class="comment">//串的开始</span></span><br><span class="line">$    <span class="comment">//串的结束</span></span><br><span class="line">*<span class="comment">//零到多次匹配</span></span><br><span class="line">+<span class="comment">//一到多次匹配</span></span><br><span class="line">?<span class="comment">//零或一次匹配</span></span><br></pre></td></tr></table></figure><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><p>什么是量词： 数量词</p><p>量词在正则里的作用：规定每次要匹配多少个？</p><blockquote><p>写法格式：格式一：{3，5}，最少三个，最多只能是5个 </p><p>格式二：{2，}最少两个，最多无穷个</p><p>格式三：{5}  只能是5个，少一个或者多一个都不行 </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">"1234567895288996522231564"</span></span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/\d&#123;2,5&#125;/</span>   <span class="comment">//表示最少要匹配两个元素，最多则可以匹配5个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg))</span><br></pre></td></tr></table></figure><h3 id="贪婪匹配与非贪婪匹配"><a href="#贪婪匹配与非贪婪匹配" class="headerlink" title="贪婪匹配与非贪婪匹配"></a>贪婪匹配与非贪婪匹配</h3><p>贪婪匹配：最少的只是作为限制条件，一般都是以最少的数量来进行匹配</p><p>非贪婪匹配：最多的只是作为限制条件，一般都是以最少的数量进行匹配</p><h2 id="范围词"><a href="#范围词" class="headerlink" title="范围词"></a>范围词</h2><p>范围词：规定匹配内容的一个范围</p><p>格式：   [  ]</p><blockquote><p>let reg=/[2,6]/         //匹配2到6之间的数字，不在这个范围的都不会被匹配</p><p>let reg= /\w[a,z]/      //匹配a到w之间的字母</p><p>let reg=/[a-zA-Z]/g    匹配小写a-z和大写的A-Z</p><p>let reg=/[^ 0-6]/     表示不在范围0-6内字符集      ^表示取反</p><p>let reg=/[abf]/g    表示每一位都是或的意思</p></blockquote><p><strong>匹配中文汉字需要使用字符集才行，也就是Unicode码</strong></p><p><strong>中文的起始位置：4e00</strong></p><p><strong>结束位置：9fa5</strong>                let reg=/[\u4e00-\u9fa5]/g</p><h5 id="使用Unicode码查找汉字时，需要在前面加上”u”"><a href="#使用Unicode码查找汉字时，需要在前面加上”u”" class="headerlink" title="使用Unicode码查找汉字时，需要在前面加上”u”"></a><strong>使用Unicode码查找汉字时，需要在前面加上”u”</strong></h5><p><strong>范围及重复:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ ]   <span class="comment">//在集合中的任意一个字符</span></span><br><span class="line">[^   ]<span class="comment">//不在集合中的任意一个字符</span></span><br><span class="line">\w<span class="comment">//匹配所有a-w之间的字符</span></span><br><span class="line"> \s<span class="comment">//匹配所有的空白字符</span></span><br><span class="line"> \b<span class="comment">//匹配所有的的数字字符</span></span><br></pre></td></tr></table></figure><h2 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h2><p>把某个部分作为一个整体</p><p><strong>格式：   （）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">"abccccdhjgdsjfgyrfhsjfgdfg jhj"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/(abc)+/g</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg))</span><br></pre></td></tr></table></figure><p><strong>重点：</strong></p><p>/（ab）\1/匹配到的  “ab”   那么\1=‘ab’代表第一个子集匹配到的结果</p><h2 id="replace（）方法"><a href="#replace（）方法" class="headerlink" title="replace（）方法"></a>replace（）方法</h2><p> let str=”百色学院 信息工程学院”;</p><p>​       let leg=/(百色学院 )\s+(信息工程学院)/g</p><p>​       let n=str.replace(leg,”$2 $1”);</p><p>​       console.log(n)</p><h2 id="正则断言"><a href="#正则断言" class="headerlink" title="正则断言"></a>正则断言</h2><p>lastIndex：存放下一次匹配的起始位置</p><p>如 console.log(reg.lastindex)  //在正则没被调用前，lastIndex的初始位置为</p><h4 id="正向肯定预查"><a href="#正向肯定预查" class="headerlink" title="正向肯定预查"></a>正向肯定预查</h4><ul><li>括号是必须的，写法:(?!=…)</li><li>有些语言并不完全支持，比如：javascript的正则并不支持<code>后瞻断言</code>表达式，使用了会报错的。</li><li>其中<code>exp</code>是一个正则表达式可以是子模式,如：<code>(?=((exp))</code>。</li><li>环视也称断言;断言是不占用字符串的((?=exp)所以不能引用,exp是占用字符串的) </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let str1=&quot;张某人&quot;；</span><br><span class="line">let str2=&quot;张三&quot;；</span><br><span class="line">let str3=&quot;张大陆&quot;</span><br><span class="line">let leg=/张(？=三)/</span><br></pre></td></tr></table></figure><ul><li><ul><li><code>(?=exp)</code> 顺序肯定环视，表示所在位置右侧能够匹配exp</li><li><code>(?!exp)</code> 顺序否定环视，表示所在位置右侧不能匹配exp</li></ul></li></ul><ul><li><code>(?&lt;=exp)</code> 逆序肯定环视，表示所在位置左侧能够匹配exp</li><li><code>(?&lt;!exp)</code> 逆序否定环视，表示所在位置左侧不能匹配exp</li></ul><h2 id="去除空格方法"><a href="#去除空格方法" class="headerlink" title="去除空格方法"></a>去除空格方法</h2><p>trim()只能去除首尾空格，中间的空白符无法去掉</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//trim()方法去除段落前后的空格</span></span><br><span class="line"><span class="keyword">let</span> input=</span><br><span class="line"><span class="keyword">let</span> str=input.value.trim()</span><br><span class="line"></span><br><span class="line"><span class="comment">//正则去空白符</span></span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/\s+/g</span></span><br><span class="line"><span class="keyword">let</span> newStr=input.value.replace(reg,<span class="string">""</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原生js </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
